{"ast":null,"code":"import * as React from 'react';\nimport { ReactReduxContext } from './Context';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\n\nfunction Provider(_ref) {\n  let {\n    store,\n    context,\n    children,\n    serverState,\n    stabilityCheck = 'once',\n    noopCheck = 'once'\n  } = _ref;\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store);\n    return {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : undefined,\n      stabilityCheck,\n      noopCheck\n    };\n  }, [store, serverState, stabilityCheck, noopCheck]);\n  const previousState = React.useMemo(() => store.getState(), [store]);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      subscription\n    } = contextValue;\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return () => {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = undefined;\n    };\n  }, [contextValue, previousState]);\n  const Context = context || ReactReduxContext; // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype\n\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nexport default Provider;","map":{"version":3,"sources":["D:/Роксолана/IT/Goit/phonebook/node_modules/react-redux/es/components/Provider.js"],"names":["React","ReactReduxContext","createSubscription","useIsomorphicLayoutEffect","Provider","store","context","children","serverState","stabilityCheck","noopCheck","contextValue","useMemo","subscription","getServerState","undefined","previousState","getState","onStateChange","notifyNestedSubs","trySubscribe","tryUnsubscribe","Context","createElement","value"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,yBAAT,QAA0C,oCAA1C;;AAEA,SAASC,QAAT,OAOG;AAAA,MAPe;AAChBC,IAAAA,KADgB;AAEhBC,IAAAA,OAFgB;AAGhBC,IAAAA,QAHgB;AAIhBC,IAAAA,WAJgB;AAKhBC,IAAAA,cAAc,GAAG,MALD;AAMhBC,IAAAA,SAAS,GAAG;AANI,GAOf;AACD,QAAMC,YAAY,GAAGX,KAAK,CAACY,OAAN,CAAc,MAAM;AACvC,UAAMC,YAAY,GAAGX,kBAAkB,CAACG,KAAD,CAAvC;AACA,WAAO;AACLA,MAAAA,KADK;AAELQ,MAAAA,YAFK;AAGLC,MAAAA,cAAc,EAAEN,WAAW,GAAG,MAAMA,WAAT,GAAuBO,SAH7C;AAILN,MAAAA,cAJK;AAKLC,MAAAA;AALK,KAAP;AAOD,GAToB,EASlB,CAACL,KAAD,EAAQG,WAAR,EAAqBC,cAArB,EAAqCC,SAArC,CATkB,CAArB;AAUA,QAAMM,aAAa,GAAGhB,KAAK,CAACY,OAAN,CAAc,MAAMP,KAAK,CAACY,QAAN,EAApB,EAAsC,CAACZ,KAAD,CAAtC,CAAtB;AACAF,EAAAA,yBAAyB,CAAC,MAAM;AAC9B,UAAM;AACJU,MAAAA;AADI,QAEFF,YAFJ;AAGAE,IAAAA,YAAY,CAACK,aAAb,GAA6BL,YAAY,CAACM,gBAA1C;AACAN,IAAAA,YAAY,CAACO,YAAb;;AAEA,QAAIJ,aAAa,KAAKX,KAAK,CAACY,QAAN,EAAtB,EAAwC;AACtCJ,MAAAA,YAAY,CAACM,gBAAb;AACD;;AAED,WAAO,MAAM;AACXN,MAAAA,YAAY,CAACQ,cAAb;AACAR,MAAAA,YAAY,CAACK,aAAb,GAA6BH,SAA7B;AACD,KAHD;AAID,GAfwB,EAetB,CAACJ,YAAD,EAAeK,aAAf,CAfsB,CAAzB;AAgBA,QAAMM,OAAO,GAAGhB,OAAO,IAAIL,iBAA3B,CA5BC,CA4B6C;;AAE9C,SAAO,aAAaD,KAAK,CAACuB,aAAN,CAAoBD,OAAO,CAAClB,QAA5B,EAAsC;AACxDoB,IAAAA,KAAK,EAAEb;AADiD,GAAtC,EAEjBJ,QAFiB,CAApB;AAGD;;AAED,eAAeH,QAAf","sourcesContent":["import * as React from 'react';\nimport { ReactReduxContext } from './Context';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\n\nfunction Provider({\n  store,\n  context,\n  children,\n  serverState,\n  stabilityCheck = 'once',\n  noopCheck = 'once'\n}) {\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store);\n    return {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : undefined,\n      stabilityCheck,\n      noopCheck\n    };\n  }, [store, serverState, stabilityCheck, noopCheck]);\n  const previousState = React.useMemo(() => store.getState(), [store]);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      subscription\n    } = contextValue;\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return () => {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = undefined;\n    };\n  }, [contextValue, previousState]);\n  const Context = context || ReactReduxContext; // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype\n\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nexport default Provider;"]},"metadata":{},"sourceType":"module"}