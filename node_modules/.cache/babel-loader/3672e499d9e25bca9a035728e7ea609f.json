{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0420\\u043E\\u043A\\u0441\\u043E\\u043B\\u0430\\u043D\\u0430\\\\IT\\\\Goit\\\\phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addContactsThunk } from 'redux/contactsOperations';\nimport { selectUserContacts } from 'redux/selectors';\nimport Notiflix from 'notiflix';\nimport { Button } from 'components/Button/Button.styled';\nimport { ContainerForm, Form, Input } from './FormAddContact.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactForm = () => {\n  _s();\n\n  const contacts = useSelector(selectUserContacts);\n  const dispatch = useDispatch();\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name = form.elements.contactName.value.trim();\n    const number = form.elements.contactNumber.value.trim();\n    if (contacts.some(contact => contact.name === name)) return Notiflix.Notify.info(`Contact with name ${name} already exists!`);\n    if (contacts.some(contact => contact.number === number)) return Notiflix.Notify.info(`Contact with number ${number} already exists!`);\n    dispatch(addContactsThunk({\n      name,\n      number\n    }));\n    setContactName('');\n    setContactNumber('');\n    Notiflix.Notify.success(`Contact ${name} successfully added.`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContainerForm, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        name: \"contactName\",\n        value: contactName,\n        onChange: e => setContactName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        name: \"contactNumber\",\n        value: contactNumber,\n        onChange: e => setContactNumber(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactForm, \"Ul3JmlbeNGj5q9Rzs+3m9ZtnFMI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ContactForm;\nContactForm.propTypes = {\n  contacts: PropTypes.array.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["D:/Роксолана/IT/Goit/phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["React","useState","useDispatch","useSelector","PropTypes","addContactsThunk","selectUserContacts","Notiflix","Button","ContainerForm","Form","Input","ContactForm","contacts","dispatch","contactName","setContactName","contactNumber","setContactNumber","handleSubmit","event","preventDefault","form","currentTarget","name","elements","value","trim","number","some","contact","Notify","info","success","e","target","propTypes","array","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,OAAOC,QAAP,MAAqB,UAArB;AAEA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,KAA9B,QAA2C,yBAA3C;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGV,WAAW,CAACG,kBAAD,CAA5B;AACA,QAAMQ,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAMkB,YAAY,GAAGC,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,IAAI,GAAGF,KAAK,CAACG,aAAnB;AAEA,UAAMC,IAAI,GAAGF,IAAI,CAACG,QAAL,CAAcV,WAAd,CAA0BW,KAA1B,CAAgCC,IAAhC,EAAb;AACA,UAAMC,MAAM,GAAGN,IAAI,CAACG,QAAL,CAAcR,aAAd,CAA4BS,KAA5B,CAAkCC,IAAlC,EAAf;AAEA,QAAId,QAAQ,CAACgB,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAACN,IAAR,KAAiBA,IAA1C,CAAJ,EACE,OAAOjB,QAAQ,CAACwB,MAAT,CAAgBC,IAAhB,CAAsB,qBAAoBR,IAAK,kBAA/C,CAAP;AAEF,QAAIX,QAAQ,CAACgB,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAACF,MAAR,KAAmBA,MAA5C,CAAJ,EACE,OAAOrB,QAAQ,CAACwB,MAAT,CAAgBC,IAAhB,CACJ,uBAAsBJ,MAAO,kBADzB,CAAP;AAIFd,IAAAA,QAAQ,CAACT,gBAAgB,CAAC;AAAEmB,MAAAA,IAAF;AAAQI,MAAAA;AAAR,KAAD,CAAjB,CAAR;AAEAZ,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AAEAX,IAAAA,QAAQ,CAACwB,MAAT,CAAgBE,OAAhB,CAAyB,WAAUT,IAAK,sBAAxC;AACD,GAtBD;;AAwBA,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEL,YAAhB;AAAA,8BACE;AAAA,kBAAO;AAAP;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,KAAK,EAAEJ,WAHT;AAIE,QAAA,QAAQ,EAAEmB,CAAC,IAAIlB,cAAc,CAACkB,CAAC,CAACC,MAAF,CAAST,KAAV,CAJ/B;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE;AAAA,kBAAO;AAAP;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,eAFP;AAGE,QAAA,KAAK,EAAET,aAHT;AAIE,QAAA,QAAQ,EAAEiB,CAAC,IAAIhB,gBAAgB,CAACgB,CAAC,CAACC,MAAF,CAAST,KAAV,CAJjC;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,cAXF,eAmBE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,kBAAsB;AAAtB;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAxDM;;GAAMd,W;UACMT,W,EACAD,W;;;KAFNU,W;AA0DbA,WAAW,CAACwB,SAAZ,GAAwB;AACtBvB,EAAAA,QAAQ,EAAET,SAAS,CAACiC,KAAV,CAAgBC;AADJ,CAAxB","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { addContactsThunk } from 'redux/contactsOperations';\r\nimport { selectUserContacts } from 'redux/selectors';\r\n\r\nimport Notiflix from 'notiflix';\r\n\r\nimport { Button } from 'components/Button/Button.styled';\r\nimport { ContainerForm, Form, Input } from './FormAddContact.styled';\r\n\r\nexport const ContactForm = () => {\r\n  const contacts = useSelector(selectUserContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const [contactName, setContactName] = useState('');\r\n  const [contactNumber, setContactNumber] = useState('');\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const form = event.currentTarget;\r\n\r\n    const name = form.elements.contactName.value.trim();\r\n    const number = form.elements.contactNumber.value.trim();\r\n\r\n    if (contacts.some(contact => contact.name === name))\r\n      return Notiflix.Notify.info(`Contact with name ${name} already exists!`);\r\n\r\n    if (contacts.some(contact => contact.number === number))\r\n      return Notiflix.Notify.info(\r\n        `Contact with number ${number} already exists!`\r\n      );\r\n\r\n    dispatch(addContactsThunk({ name, number }));\r\n\r\n    setContactName('');\r\n    setContactNumber('');\r\n\r\n    Notiflix.Notify.success(`Contact ${name} successfully added.`);\r\n  };\r\n\r\n  return (\r\n    <ContainerForm>\r\n      <Form onSubmit={handleSubmit}>\r\n        <label>Name: </label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"contactName\"\r\n          value={contactName}\r\n          onChange={e => setContactName(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label>Number: </label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"contactNumber\"\r\n          value={contactNumber}\r\n          onChange={e => setContactNumber(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </Form>\r\n    </ContainerForm>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};"]},"metadata":{},"sourceType":"module"}