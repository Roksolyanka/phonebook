{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0420\\u043E\\u043A\\u0441\\u043E\\u043B\\u0430\\u043D\\u0430\\\\IT\\\\Goit\\\\phonebook\\\\src\\\\components\\\\ContactForm\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Notify } from 'notiflix';\nimport { addContactsThunk, editContactThunk } from 'redux/contacts/operations';\nimport { selectUserContacts } from 'redux/selectors';\nimport { InputComponent } from 'components/Input';\nimport { duplicateNameNotification, duplicateNumberNotification } from 'helpers/helper';\nimport { ContainerForm, Form, WrapperForButton } from './styled';\nimport { ButtonUi } from 'ui/ButtonUi.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contactInitialState = {\n  name: '',\n  number: ''\n};\nexport const ContactForm = ({\n  editingContact,\n  setEditingContact,\n  setActiveContact,\n  onCloseModal\n}) => {\n  _s();\n  const contacts = useSelector(selectUserContacts);\n  const dispatch = useDispatch();\n  const [contact, setContact] = useState(contactInitialState);\n  useEffect(() => {\n    if (editingContact) setContact(editingContact);\n  }, [editingContact]);\n  const handleCancel = () => {\n    setEditingContact(null);\n    setContact(contactInitialState);\n    setActiveContact(null);\n    onCloseModal();\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const number = form.elements.contactNumber.value.trim();\n    let name = form.elements.contactName.value.trim();\n    const nameWords = name.split(' ');\n    name = nameWords.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n    if (!duplicateNameNotification(contacts, name, editingContact) || !duplicateNumberNotification(contacts, number, editingContact)) {\n      return;\n    }\n    if (editingContact) {\n      dispatch(editContactThunk({\n        id: editingContact.id,\n        name,\n        number\n      }));\n    } else {\n      dispatch(addContactsThunk({\n        name,\n        number\n      }));\n    }\n    Notify.success(`Contact ${name} successfully ${editingContact ? 'edited' : 'added'}.`);\n    setContact(contactInitialState);\n    setEditingContact(null);\n    setActiveContact(null);\n    onCloseModal();\n  };\n  const handleSetContact = (inputName, value) => {\n    setContact(prevContact => ({\n      ...prevContact,\n      [inputName]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ContainerForm, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(InputComponent, {\n        label: \"Name:\",\n        type: \"text\",\n        name: \"contactName\",\n        value: contact.name,\n        onChange: e => handleSetContact('name', e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputComponent, {\n        label: \"Number:\",\n        type: \"text\",\n        name: \"contactNumber\",\n        value: contact.number,\n        onChange: e => handleSetContact('number', e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WrapperForButton, {\n        children: [/*#__PURE__*/_jsxDEV(ButtonUi, {\n          margin: '0',\n          type: \"submit\",\n          children: editingContact ? 'Edit contact' : 'Add contact'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), editingContact && /*#__PURE__*/_jsxDEV(ButtonUi, {\n          margin: '0',\n          type: \"button\",\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactForm, \"vjX0DRdJk18fVXKtXOrIxHXhVnk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = ContactForm;\nContactForm.propTypes = {\n  editingContact: PropTypes.object,\n  setEditingContact: PropTypes.func,\n  setActiveContact: PropTypes.func,\n  onCloseModal: PropTypes.func,\n  contacts: PropTypes.array\n};\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import PropTypes from 'prop-types';\n\n// import { addContactsThunk, editContactThunk } from 'redux/contactsOperations';\n// import { selectUserContacts } from 'redux/selectors';\n\n// import Notiflix from 'notiflix';\n\n// import {\n//   ButtonForm,\n//   ContainerForm,\n//   Form,\n//   InputStyle,\n//   WrapperForButton,\n//   WrapperStyle,\n// } from './FormAddContact.styled';\n// import { InputComponent } from 'components/Input/Input';\n// import { useFormik } from 'formik';\n// import { contactSchema } from 'schemas';\n\n// export const ContactForm = ({ editingContact, setEditingContact }) => {\n//   const contacts = useSelector(selectUserContacts);\n//   const dispatch = useDispatch();\n\n//   const formik = useFormik({\n//     initialValues: {\n//       contactName: '',\n//       contactNumber: '',\n//     },\n//     validationSchema: contactSchema,\n//     onSubmit: values => handleSubmit(values),\n//   });\n\n//   // useEffect(() => {\n//   //   if (editingContact && formik.values.contactName !== editingContact.name) {\n//   //     formik.setValues({\n//   //       contactName: editingContact.name,\n//   //       contactNumber: editingContact.number,\n//   //     });\n//   //   }\n//   // }, [editingContact, formik]);\n\n//   // useEffect(() => {\n//   //   if (editingContact) {\n//   //     if (\n//   //       formik.values.contactName !== editingContact.name ||\n//   //       formik.values.contactNumber !== editingContact.number\n//   //     ) {\n//   //       formik.setValues({\n//   //         contactName: editingContact.name,\n//   //         contactNumber: editingContact.number,\n//   //       });\n//   //     }\n//   //   }\n//   // }, [editingContact, formik]);\n\n//   useEffect(() => {\n//      console.log('Editing Contact (contactform.jsx):', editingContact);\n//      console.log('Formik values (contactform.jsx):', formik.values);\n//     if (\n//       editingContact &&\n//       (formik.values.contactName !== editingContact.name ||\n//         formik.values.contactNumber !== editingContact.number)\n//     ) {\n//       console.log('Setting Formik values...');\n//       formik.setValues({\n//         contactName: editingContact.name,\n//         contactNumber: editingContact.number,\n//       });\n//     }\n//   }, [editingContact, formik]);\n\n//   const handleCancel = () => {\n//     setEditingContact(null);\n//     formik.resetForm();\n//   };\n\n//   const handleSubmit = ({ contactName, contactNumber }) => {\n//     const nameWords = contactName.split(' ');\n//     const name = nameWords\n//       .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n//       .join(' ');\n\n//     if (\n//       contacts.some(\n//         contact => contact.name === name && editingContact !== contact\n//       )\n//     )\n//       return Notiflix.Notify.info(`Contact with name ${name} already exists!`);\n\n//     if (\n//       contacts.some(\n//         contact =>\n//           contact.number === contactNumber && editingContact !== contact\n//       )\n//     )\n//       return Notiflix.Notify.info(\n//         `Contact with number ${contactNumber} already exists!`\n//       );\n\n//     if (editingContact) {\n//       dispatch(\n//         editContactThunk({ id: editingContact.id, name, number: contactNumber })\n//       );\n//     } else {\n//       dispatch(addContactsThunk({ name, number: contactNumber }));\n//     }\n\n//     Notiflix.Notify.success(\n//       `Contact ${name} successfully ${editingContact ? 'edited' : 'added'}.`\n//     );\n\n//     formik.resetForm();\n//     setEditingContact(null);\n//   };\n\n//   return (\n//     <ContainerForm>\n//       <Form onSubmit={formik.handleSubmit}>\n//         <InputComponent\n//           label=\"Name:\"\n//           type=\"text\"\n//           name=\"contactName\"\n//           placeholder=\"Enter a name\"\n//           value={formik.values.contactName}\n//           onChange={formik.handleChange}\n//           required\n//           wrapperStyle={WrapperStyle}\n//           inputStyle={InputStyle}\n//           formik={formik}\n//         />\n//         <InputComponent\n//           label=\"Number:\"\n//           type=\"text\"\n//           name=\"contactNumber\"\n//           placeholder=\"Enter phone number\"\n//           value={formik.values.contactNumber}\n//           onChange={formik.handleChange}\n//           required\n//           wrapperStyle={WrapperStyle}\n//           inputStyle={InputStyle}\n//           formik={formik}\n//         />\n//         <WrapperForButton>\n//           <ButtonForm type=\"submit\">\n//             {editingContact ? 'Edit contact' : 'Add contact'}\n//           </ButtonForm>\n//           {editingContact && (\n//             <ButtonForm type=\"button\" onClick={handleCancel}>\n//               Cancel\n//             </ButtonForm>\n//           )}\n//         </WrapperForButton>\n//       </Form>\n//     </ContainerForm>\n//   );\n// };\n\n// ContactForm.propTypes = {\n//   editingContact: PropTypes.object,\n//   setEditingContact: PropTypes.func,\n//   contacts: PropTypes.array,\n// };\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Notify","addContactsThunk","editContactThunk","selectUserContacts","InputComponent","duplicateNameNotification","duplicateNumberNotification","ContainerForm","Form","WrapperForButton","ButtonUi","jsxDEV","_jsxDEV","contactInitialState","name","number","ContactForm","editingContact","setEditingContact","setActiveContact","onCloseModal","_s","contacts","dispatch","contact","setContact","handleCancel","handleSubmit","event","preventDefault","form","currentTarget","elements","contactNumber","value","trim","contactName","nameWords","split","map","word","charAt","toUpperCase","slice","join","id","success","handleSetContact","inputName","prevContact","children","onSubmit","label","type","onChange","e","target","required","fileName","_jsxFileName","lineNumber","columnNumber","margin","onClick","_c","propTypes","object","func","array","$RefreshReg$"],"sources":["D:/Роксолана/IT/Goit/phonebook/src/components/ContactForm/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Notify } from 'notiflix';\r\n\r\nimport { addContactsThunk, editContactThunk } from 'redux/contacts/operations';\r\nimport { selectUserContacts } from 'redux/selectors';\r\n\r\nimport { InputComponent } from 'components/Input';\r\n\r\nimport {\r\n  duplicateNameNotification,\r\n  duplicateNumberNotification,\r\n} from 'helpers/helper';\r\n\r\nimport { ContainerForm, Form, WrapperForButton } from './styled';\r\nimport { ButtonUi } from 'ui/ButtonUi.styled';\r\n\r\nconst contactInitialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nexport const ContactForm = ({\r\n  editingContact,\r\n  setEditingContact,\r\n  setActiveContact,\r\n  onCloseModal,\r\n}) => {\r\n  const contacts = useSelector(selectUserContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const [contact, setContact] = useState(contactInitialState);\r\n\r\n  useEffect(() => {\r\n    if (editingContact) setContact(editingContact);\r\n  }, [editingContact]);\r\n\r\n  const handleCancel = () => {\r\n    setEditingContact(null);\r\n    setContact(contactInitialState);\r\n    setActiveContact(null);\r\n    onCloseModal();\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const form = event.currentTarget;\r\n    const number = form.elements.contactNumber.value.trim();\r\n    let name = form.elements.contactName.value.trim();\r\n    const nameWords = name.split(' ');\r\n    name = nameWords\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n\r\n    if (\r\n      !duplicateNameNotification(contacts, name, editingContact) ||\r\n      !duplicateNumberNotification(contacts, number, editingContact)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (editingContact) {\r\n      dispatch(editContactThunk({ id: editingContact.id, name, number }));\r\n    } else {\r\n      dispatch(addContactsThunk({ name, number }));\r\n    }\r\n\r\n    Notify.success(\r\n      `Contact ${name} successfully ${editingContact ? 'edited' : 'added'}.`\r\n    );\r\n\r\n    setContact(contactInitialState);\r\n    setEditingContact(null);\r\n    setActiveContact(null);\r\n    onCloseModal();\r\n  };\r\n\r\n  const handleSetContact = (inputName, value) => {\r\n    setContact(prevContact => ({\r\n      ...prevContact,\r\n      [inputName]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <ContainerForm>\r\n      <Form onSubmit={handleSubmit}>\r\n        <InputComponent\r\n          label=\"Name:\"\r\n          type=\"text\"\r\n          name=\"contactName\"\r\n          value={contact.name}\r\n          onChange={e => handleSetContact('name', e.target.value)}\r\n          required\r\n        />\r\n        <InputComponent\r\n          label=\"Number:\"\r\n          type=\"text\"\r\n          name=\"contactNumber\"\r\n          value={contact.number}\r\n          onChange={e => handleSetContact('number', e.target.value)}\r\n          required\r\n        />\r\n        <WrapperForButton>\r\n          <ButtonUi margin={'0'} type=\"submit\">\r\n            {editingContact ? 'Edit contact' : 'Add contact'}\r\n          </ButtonUi>\r\n          {editingContact && (\r\n            <ButtonUi margin={'0'} type=\"button\" onClick={handleCancel}>\r\n              Cancel\r\n            </ButtonUi>\r\n          )}\r\n        </WrapperForButton>\r\n      </Form>\r\n    </ContainerForm>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  editingContact: PropTypes.object,\r\n  setEditingContact: PropTypes.func,\r\n  setActiveContact: PropTypes.func,\r\n  onCloseModal: PropTypes.func,\r\n  contacts: PropTypes.array,\r\n};\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\n\r\n// import { addContactsThunk, editContactThunk } from 'redux/contactsOperations';\r\n// import { selectUserContacts } from 'redux/selectors';\r\n\r\n// import Notiflix from 'notiflix';\r\n\r\n// import {\r\n//   ButtonForm,\r\n//   ContainerForm,\r\n//   Form,\r\n//   InputStyle,\r\n//   WrapperForButton,\r\n//   WrapperStyle,\r\n// } from './FormAddContact.styled';\r\n// import { InputComponent } from 'components/Input/Input';\r\n// import { useFormik } from 'formik';\r\n// import { contactSchema } from 'schemas';\r\n\r\n// export const ContactForm = ({ editingContact, setEditingContact }) => {\r\n//   const contacts = useSelector(selectUserContacts);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const formik = useFormik({\r\n//     initialValues: {\r\n//       contactName: '',\r\n//       contactNumber: '',\r\n//     },\r\n//     validationSchema: contactSchema,\r\n//     onSubmit: values => handleSubmit(values),\r\n//   });\r\n\r\n//   // useEffect(() => {\r\n//   //   if (editingContact && formik.values.contactName !== editingContact.name) {\r\n//   //     formik.setValues({\r\n//   //       contactName: editingContact.name,\r\n//   //       contactNumber: editingContact.number,\r\n//   //     });\r\n//   //   }\r\n//   // }, [editingContact, formik]);\r\n\r\n//   // useEffect(() => {\r\n//   //   if (editingContact) {\r\n//   //     if (\r\n//   //       formik.values.contactName !== editingContact.name ||\r\n//   //       formik.values.contactNumber !== editingContact.number\r\n//   //     ) {\r\n//   //       formik.setValues({\r\n//   //         contactName: editingContact.name,\r\n//   //         contactNumber: editingContact.number,\r\n//   //       });\r\n//   //     }\r\n//   //   }\r\n//   // }, [editingContact, formik]);\r\n\r\n//   useEffect(() => {\r\n//      console.log('Editing Contact (contactform.jsx):', editingContact);\r\n//      console.log('Formik values (contactform.jsx):', formik.values);\r\n//     if (\r\n//       editingContact &&\r\n//       (formik.values.contactName !== editingContact.name ||\r\n//         formik.values.contactNumber !== editingContact.number)\r\n//     ) {\r\n//       console.log('Setting Formik values...');\r\n//       formik.setValues({\r\n//         contactName: editingContact.name,\r\n//         contactNumber: editingContact.number,\r\n//       });\r\n//     }\r\n//   }, [editingContact, formik]);\r\n\r\n//   const handleCancel = () => {\r\n//     setEditingContact(null);\r\n//     formik.resetForm();\r\n//   };\r\n\r\n//   const handleSubmit = ({ contactName, contactNumber }) => {\r\n//     const nameWords = contactName.split(' ');\r\n//     const name = nameWords\r\n//       .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n//       .join(' ');\r\n\r\n//     if (\r\n//       contacts.some(\r\n//         contact => contact.name === name && editingContact !== contact\r\n//       )\r\n//     )\r\n//       return Notiflix.Notify.info(`Contact with name ${name} already exists!`);\r\n\r\n//     if (\r\n//       contacts.some(\r\n//         contact =>\r\n//           contact.number === contactNumber && editingContact !== contact\r\n//       )\r\n//     )\r\n//       return Notiflix.Notify.info(\r\n//         `Contact with number ${contactNumber} already exists!`\r\n//       );\r\n\r\n//     if (editingContact) {\r\n//       dispatch(\r\n//         editContactThunk({ id: editingContact.id, name, number: contactNumber })\r\n//       );\r\n//     } else {\r\n//       dispatch(addContactsThunk({ name, number: contactNumber }));\r\n//     }\r\n\r\n//     Notiflix.Notify.success(\r\n//       `Contact ${name} successfully ${editingContact ? 'edited' : 'added'}.`\r\n//     );\r\n\r\n//     formik.resetForm();\r\n//     setEditingContact(null);\r\n//   };\r\n\r\n//   return (\r\n//     <ContainerForm>\r\n//       <Form onSubmit={formik.handleSubmit}>\r\n//         <InputComponent\r\n//           label=\"Name:\"\r\n//           type=\"text\"\r\n//           name=\"contactName\"\r\n//           placeholder=\"Enter a name\"\r\n//           value={formik.values.contactName}\r\n//           onChange={formik.handleChange}\r\n//           required\r\n//           wrapperStyle={WrapperStyle}\r\n//           inputStyle={InputStyle}\r\n//           formik={formik}\r\n//         />\r\n//         <InputComponent\r\n//           label=\"Number:\"\r\n//           type=\"text\"\r\n//           name=\"contactNumber\"\r\n//           placeholder=\"Enter phone number\"\r\n//           value={formik.values.contactNumber}\r\n//           onChange={formik.handleChange}\r\n//           required\r\n//           wrapperStyle={WrapperStyle}\r\n//           inputStyle={InputStyle}\r\n//           formik={formik}\r\n//         />\r\n//         <WrapperForButton>\r\n//           <ButtonForm type=\"submit\">\r\n//             {editingContact ? 'Edit contact' : 'Add contact'}\r\n//           </ButtonForm>\r\n//           {editingContact && (\r\n//             <ButtonForm type=\"button\" onClick={handleCancel}>\r\n//               Cancel\r\n//             </ButtonForm>\r\n//           )}\r\n//         </WrapperForButton>\r\n//       </Form>\r\n//     </ContainerForm>\r\n//   );\r\n// };\r\n\r\n// ContactForm.propTypes = {\r\n//   editingContact: PropTypes.object,\r\n//   setEditingContact: PropTypes.func,\r\n//   contacts: PropTypes.array,\r\n// };\r\n"],"mappings":"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CmE,MAAM;EAChChD,iBAAiB,EAAEnB,SAAS,CAACoE,IAAI;EACjChD,gBAAgB,EAAEpB,SAAS,CAACoE,IAAI;EAChC/C,YAAY,EAAErB,SAAS,CAACoE,IAAI;EAC5B7C,QAAQ,EAAEvB,SAAS,CAACqE;AACtB,CAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,IAAAJ,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}