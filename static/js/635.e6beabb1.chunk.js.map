{"version":3,"file":"static/js/635.e6beabb1.chunk.js","mappings":"0MAGaA,EAASC,EAAAA,GAAAA,OAAH,gdACG,kBAAMC,EAAAA,EAAAA,WAAN,IACX,kBAAMA,EAAAA,EAAAA,eAAN,IACqB,kBAAMA,EAAAA,EAAAA,eAAN,IAcI,kBAAMA,EAAAA,EAAAA,eAAN,IAEZ,kBAAMA,EAAAA,EAAAA,eAAN,G,8MCnBXC,EAAgBF,EAAAA,GAAAA,IAAH,qEAKbG,EAAOH,EAAAA,GAAAA,KAAH,wXAIK,kBAAMC,EAAAA,EAAAA,WAAN,IAEN,kBAAMA,EAAAA,EAAAA,WAAN,IAOL,kBAAMA,EAAAA,EAAAA,cAAN,IAEM,kBAAMA,EAAAA,EAAAA,eAAN,IAKJG,EAAQJ,EAAAA,GAAAA,MAAH,iOAMI,kBAAMC,EAAAA,EAAAA,cAAN,IAGJ,kBAAMA,EAAAA,EAAAA,WAAN,IACV,kBAAMA,EAAAA,EAAAA,WAAN,I,SC1BKI,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAEjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KA0BA,OACE,SAACb,EAAD,WACE,UAACC,EAAD,CAAMa,SA1BW,SAAAC,GACnBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cAEbC,EAAOF,EAAKG,SAASV,YAAYW,MAAMC,OACvCC,EAASN,EAAKG,SAASR,cAAcS,MAAMC,OAEjD,OAAIlB,EAASoB,MAAK,SAAAC,GAAO,OAAIA,EAAQN,OAASA,CAArB,IAChBO,IAAAA,OAAAA,KAAA,4BAA0CP,EAA1C,qBAELf,EAASoB,MAAK,SAAAC,GAAO,OAAIA,EAAQF,SAAWA,CAAvB,IAChBG,IAAAA,OAAAA,KAAA,8BACkBH,EADlB,sBAIThB,GAASoB,EAAAA,EAAAA,IAAiB,CAAER,KAAAA,EAAMI,OAAAA,KAElCZ,EAAe,IACfE,EAAiB,SAEjBa,IAAAA,OAAAA,QAAA,kBAAmCP,EAAnC,yBACD,EAIG,WACE,2BAAO,YACP,SAACjB,EAAD,CACE0B,KAAK,OACLT,KAAK,cACLE,MAAOX,EACPmB,SAAU,SAAAC,GAAC,OAAInB,EAAemB,EAAEC,OAAOV,MAA5B,EACXW,UAAQ,KAGV,2BAAO,cACP,SAAC9B,EAAD,CACE0B,KAAK,OACLT,KAAK,gBACLE,MAAOT,EACPiB,SAAU,SAAAC,GAAC,OAAIjB,EAAiBiB,EAAEC,OAAOV,MAA9B,EACXW,UAAQ,KAGV,SAAC,IAAD,CAAQJ,KAAK,SAAb,SAAsB,oBAI7B,ECjEYK,EAAenC,EAAAA,GAAAA,GAAH,iIAQZoC,EAAcpC,EAAAA,GAAAA,GAAH,idAIb,kBAAMC,EAAAA,EAAAA,YAAN,IAEM,kBAAMA,EAAAA,EAAAA,eAAN,IAQK,kBAAMA,EAAAA,EAAAA,WAAN,IAEI,kBAAMA,EAAAA,EAAAA,SAAN,IAGR,kBAAMA,EAAAA,EAAAA,WAAN,IAILoC,EAAYrC,EAAAA,GAAAA,KAAH,6DAEX,kBAAMC,EAAAA,EAAAA,eAAN,IAGEqC,EAAetC,EAAAA,GAAAA,OAAH,idACH,kBAAMC,EAAAA,EAAAA,WAAN,IACX,kBAAMA,EAAAA,EAAAA,eAAN,IASqB,kBAAMA,EAAAA,EAAAA,eAAN,IAMR,kBAAMA,EAAAA,EAAAA,eAAN,IACa,kBAAMA,EAAAA,EAAAA,eAAN,IC9CxBsC,EAAc,SAAC,GAAmC,IAAjCjC,EAAgC,EAAhCA,SAAUkC,EAAsB,EAAtBA,gBAChCC,EAAeC,MAAMC,QAAQrC,IAAaA,EAASsC,OAAS,EAElE,OACE,SAACT,EAAD,UACGM,GACCnC,EAASuC,KAAI,SAAAlB,GACX,OACE,UAACS,EAAD,YACE,4BACE,0BAAOT,EAAQN,OAAY,KAC3B,SAACgB,EAAD,UAAYV,EAAQF,aAEtB,SAACa,EAAD,CACE,aAAW,iBACXR,KAAK,SACLgB,QAAS,WACPN,EAAgBb,EAAQoB,IACxBnB,IAAAA,OAAAA,QAAA,kBACaD,EAAQN,KADrB,0BAGD,EARH,SASC,WAdeM,EAAQoB,GAmB7B,KAGR,ECtCYC,EAAehD,EAAAA,GAAAA,MAAH,+NAKd,kBAAMC,EAAAA,EAAAA,YAAN,IAEM,kBAAMA,EAAAA,EAAAA,eAAN,IAKJgD,EAAYjD,EAAAA,GAAAA,MAAH,wQAOA,kBAAMC,EAAAA,EAAAA,cAAN,IAIJ,kBAAMA,EAAAA,EAAAA,WAAN,IACV,kBAAMA,EAAAA,EAAAA,WAAN,ICtBKiD,EAAS,SAAC,GAAD,IAAG3B,EAAH,EAAGA,MAAOQ,EAAV,EAAUA,SAAV,OACpB,UAACiB,EAAD,WAAc,0BAEZ,SAACC,EAAD,CAAWnB,KAAK,OAAOP,MAAOA,EAAOQ,SAAUA,MAH7B,E,oBCFToB,EAAYnD,EAAAA,GAAAA,IAAH,2GAOToD,EAAgBpD,EAAAA,GAAAA,GAAH,+MAIf,kBAAMC,EAAAA,EAAAA,cAAN,IAEM,kBAAMA,EAAAA,EAAAA,eAAN,IAKJoD,EAAoBrD,EAAAA,GAAAA,IAAH,wCAIjBsD,EAAatD,EAAAA,GAAAA,EAAH,wJAIZ,kBAAMC,EAAAA,EAAAA,eAAN,I,UCsEX,EAtEqB,WACnB,IAAMsD,GAAkBhD,EAAAA,EAAAA,IAAYiD,EAAAA,IAC9BlD,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBiD,GAAYlD,EAAAA,EAAAA,IAAYmD,EAAAA,IACxBC,GAAQpD,EAAAA,EAAAA,IAAYqD,EAAAA,IACpBC,GAAStD,EAAAA,EAAAA,IAAYuD,EAAAA,IAErBrD,GAAWC,EAAAA,EAAAA,OAEjBqD,EAAAA,EAAAA,YAAU,WACHR,GAEL9C,GAASuD,EAAAA,EAAAA,MACV,GAAE,CAACT,EAAiB9C,IAErB,IAeMwD,EAPe,WACnB,IAAMC,EAAmBL,EAAOM,cAChC,cAAO7D,QAAP,IAAOA,OAAP,EAAOA,EAAUuD,QAAO,SAAAlC,GAAO,OAC7BA,EAAQN,KAAK8C,cAAcC,SAASF,EADP,GAGhC,CAEwBG,GAEzB,OACE,gCACE,SAAC,KAAD,UAAgB,eAChB,UAAClB,EAAD,YACE,SAAC9C,EAAD,KACA,UAACgD,EAAD,YACE,SAACD,EAAD,UAAe,aACdK,IAAa,SAACa,EAAA,EAAD,IACbX,IAAS,yBAAG,8BAA4BA,KAC3B,OAAbrD,GACC,SAACgD,EAAD,UAAY,wBAEZ,8BACuB,IAApBhD,EAASsC,QACR,+BACE,SAACU,EAAD,UAAY,0BAGd,iCACE,SAACJ,EAAD,CAAQ3B,MAAOsC,EAAQ9B,SAhClB,SAAAd,GACnBR,GAAS8D,EAAAA,EAAAA,GAAUtD,EAAMgB,OAAOV,OACjC,IA+B4C,IAA5B0C,EAAiBrB,QAChB,SAACU,EAAD,UAAY,sCAEZ,SAACf,EAAD,CACEjC,SAAU2D,EACVzB,gBA1CQ,SAAAgC,GAC1B/D,GAASgE,EAAAA,EAAAA,IAAoBD,GAC9B,iBAmDF,C","sources":["components/Button/Button.styled.js","components/ContactForm/FormAddContact.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyled.styled.js","components/ContactList/ContactList.jsx","components/Filter/FilterStyled.styled.js","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport { colors } from 'theme';\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${() => colors.accentColor};\r\n  color: ${() => colors.textShadowColor};\r\n  box-shadow: 5px 5px 2px 0px ${() => colors.textShadowColor};\r\n  font-family: 'Roboto';\r\n  font-weight: bold;\r\n  font-size: 25px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  max-height: auto;\r\n  max-width: 200px;\r\n  margin: 20px auto;\r\n\r\n  &: hover {\r\n    outline-color: transparent;\r\n    outline-style: solid;\r\n    box-shadow: 10px 10px 5px 0px ${() => colors.textShadowColor};\r\n    transition: 0.3s;\r\n    border: 1px solid ${() => colors.textShadowColor};\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\nimport { colors } from 'theme';\r\n\r\nexport const ContainerForm = styled.div`\r\n  margin-top: 100px;\r\n  padding-left: 30px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: grid;\r\n  width: 600px;\r\n  margin: 0 auto;\r\n  border: 2px solid ${() => colors.accentColor};\r\n  border-radius: 4px;\r\n  box-shadow: ${() => colors.accentColor} 5px 0 5px;\r\n  padding-top: 20px;\r\n  font-family: 'Roboto';\r\n  font-size: 40px;\r\n  font-weight: bold;\r\n\r\n  text-align: center;\r\n  color: ${() => colors.secondaryColor};\r\n  text-align: center;\r\n  text-shadow: ${() => colors.textShadowColor} 5px 0 1px;\r\n  position: sticky;\r\n  top: 50px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 550px;\r\n  height: 25px;\r\n  margin: 0 auto;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  background-color: ${() => colors.secondaryColor};\r\n\r\n  &: hover {\r\n    box-shadow: ${() => colors.accentColor} 0px 5px 10px,\r\n      ${() => colors.accentColor} 0px 2px 5px;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { addContactsThunk } from 'redux/contactsOperations';\r\nimport { selectUserContacts } from 'redux/selectors';\r\n\r\nimport Notiflix from 'notiflix';\r\n\r\nimport { Button } from 'components/Button/Button.styled';\r\nimport { ContainerForm, Form, Input } from './FormAddContact.styled';\r\n\r\nexport const ContactForm = () => {\r\n  const contacts = useSelector(selectUserContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const [contactName, setContactName] = useState('');\r\n  const [contactNumber, setContactNumber] = useState('');\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const form = event.currentTarget;\r\n\r\n    const name = form.elements.contactName.value.trim();\r\n    const number = form.elements.contactNumber.value.trim();\r\n\r\n    if (contacts.some(contact => contact.name === name))\r\n      return Notiflix.Notify.info(`Contact with name ${name} already exists!`);\r\n\r\n    if (contacts.some(contact => contact.number === number))\r\n      return Notiflix.Notify.info(\r\n        `Contact with number ${number} already exists!`\r\n      );\r\n\r\n    dispatch(addContactsThunk({ name, number }));\r\n\r\n    setContactName('');\r\n    setContactNumber('');\r\n\r\n    Notiflix.Notify.success(`Contact ${name} successfully added.`);\r\n  };\r\n\r\n  return (\r\n    <ContainerForm>\r\n      <Form onSubmit={handleSubmit}>\r\n        <label>Name: </label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"contactName\"\r\n          value={contactName}\r\n          onChange={e => setContactName(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label>Number: </label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"contactNumber\"\r\n          value={contactNumber}\r\n          onChange={e => setContactNumber(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </Form>\r\n    </ContainerForm>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.array,\r\n};\r\n","import styled from 'styled-components';\r\nimport { colors } from 'theme';\r\n\r\nexport const ContactsList = styled.ul`\r\n  display: flex;\r\n  list-style: none;\r\n  gap: 10px;\r\n  flex-wrap: wrap;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nexport const ContactItem = styled.li`\r\n  font-family: 'Roboto';\r\n  font-size: 35px;\r\n  font-weight: bold;\r\n  color: ${() => colors.primaryColor};\r\n  text-align: center;\r\n  text-shadow: ${() => colors.textShadowColor} 2px 0 1px;\r\n  margin: 0 auto 5px;\r\n  list-style: none;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 750px;\r\n  border-radius: 6px;\r\n  padding: 12px 20px;\r\n  border: 1px solid ${() => colors.accentColor};\r\n  box-sizing: border-box;\r\n  box-shadow: 0 2px 8px ${() => colors.boxShadow};\r\n\r\n  &: hover {\r\n    box-shadow: ${() => colors.accentColor} 0px 10px 10px 0px;\r\n  }\r\n`;\r\n\r\nexport const ListPhone = styled.span`\r\n  margin-left: 10px;\r\n  color: ${() => colors.textShadowColor};\r\n`;\r\n\r\nexport const ButtonDelete = styled.button`\r\n  background-color: ${() => colors.accentColor};\r\n  color: ${() => colors.textShadowColor};\r\n  font-family: 'Roboto';\r\n  font-size: 30px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  height: 32px;\r\n  width: 50px;\r\n  margin-left: 10px;\r\n  vertical-align: top;\r\n  box-shadow: 2px 2px 1px 0px ${() => colors.textShadowColor};\r\n\r\n  &: hover {\r\n    outline-color: transparent;\r\n    transition: 0.3s;\r\n    transform: scale(1.03);\r\n    border: 1px solid ${() => colors.textShadowColor};\r\n    box-shadow: 10px 10px 5px -5px ${() => colors.textShadowColor};\r\n    font-weight: bold;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  ButtonDelete,\r\n  ContactItem,\r\n  ContactsList,\r\n  ListPhone,\r\n} from './ContactListStyled.styled';\r\nimport Notiflix from 'notiflix';\r\n\r\nexport const ContactList = ({ contacts, onDeleteContact }) => {\r\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\r\n\r\n  return (\r\n    <ContactsList>\r\n      {showContacts &&\r\n        contacts.map(contact => {\r\n          return (\r\n            <ContactItem key={contact.id}>\r\n              <div>\r\n                <span>{contact.name}</span>:\r\n                <ListPhone>{contact.number}</ListPhone>\r\n              </div>\r\n              <ButtonDelete\r\n                aria-label=\"Delete contact\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onDeleteContact(contact.id);\r\n                  Notiflix.Notify.success(\r\n                    `Contact ${contact.name} successfully deleted.`\r\n                  );\r\n                }}\r\n              >\r\n                &times;\r\n              </ButtonDelete>\r\n            </ContactItem>\r\n          );\r\n        })}\r\n    </ContactsList>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nimport { colors } from 'theme';\r\n\r\nexport const FilterStyled = styled.label`\r\n  display: block;\r\n  font-family: 'Roboto';\r\n  font-size: 40px;\r\n  font-weight: bold;\r\n  color: ${() => colors.primaryColor};\r\n  text-align: center;\r\n  text-shadow: ${() => colors.textShadowColor} 2px 0 0;\r\n  margin-top: 10px;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const InputFind = styled.input`\r\n  width: 320px;\r\n  height: 40px;\r\n  margin-left: 10px;\r\n  vertical-align: top;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  background-color: ${() => colors.secondaryColor};\r\n\r\n  \r\n  &: hover, focus {\r\n    box-shadow: ${() => colors.accentColor} 0px 10px 20px,\r\n      ${() => colors.accentColor} 0px 2px 5px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { FilterStyled, InputFind } from './FilterStyled.styled';\r\n\r\nexport const Filter = ({ value, onChange }) => (\r\n  <FilterStyled>\r\n    Find contacts by name:\r\n    <InputFind type=\"text\" value={value} onChange={onChange} />\r\n  </FilterStyled>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nimport { colors } from 'theme';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  text-align: center;\r\n  gap: 20px;\r\n`;\r\n\r\nexport const TitleContacts = styled.h2`\r\n  font-family: 'Roboto';\r\n  font-size: 70px;\r\n  font-weight: bold;\r\n  color: ${() => colors.secondaryColor};\r\n  text-align: center;\r\n  text-shadow: ${() => colors.textShadowColor} 10px 0 5px;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const ContactsContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nexport const NoContacts = styled.p`\r\n  font-family: 'Roboto';\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  color: ${() => colors.textShadowColor};\r\n  text-align: center;\r\n  margin-top: 100px;\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  selectAuthentificated,\r\n  selectContactsError,\r\n  selectContactsFilter,\r\n  selectContactsIsLoading,\r\n  selectUserContacts,\r\n} from 'redux/selectors';\r\nimport {\r\n  deleteContactsThunk,\r\n  requestContactsThunk,\r\n} from 'redux/contactsOperations';\r\n\r\nimport { ContactForm } from 'components/ContactForm/ContactForm';\r\nimport { ContactList } from 'components/ContactList/ContactList';\r\nimport { Filter } from 'components/Filter/Filter';\r\nimport { Loader } from 'components/Loader/Loader';\r\n\r\nimport { TitlePhonebook } from 'components/App/App.styled';\r\nimport {\r\n  ContactsContainer,\r\n  Container,\r\n  NoContacts,\r\n  TitleContacts,\r\n} from './ContactsPage.styled';\r\nimport { setFilter } from 'redux/contactsReducer';\r\n\r\nconst ContactsPage = () => {\r\n  const authentificated = useSelector(selectAuthentificated);\r\n  const contacts = useSelector(selectUserContacts);\r\n  const isLoading = useSelector(selectContactsIsLoading);\r\n  const error = useSelector(selectContactsError);\r\n  const filter = useSelector(selectContactsFilter);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!authentificated) return;\r\n\r\n    dispatch(requestContactsThunk());\r\n  }, [authentificated, dispatch]);\r\n\r\n  const handleDeleteContact = contactId => {\r\n    dispatch(deleteContactsThunk(contactId));\r\n  };\r\n\r\n  const changeFilter = event => {\r\n    dispatch(setFilter(event.target.value));\r\n  };\r\n\r\n  const findContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts?.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n  const filteredContacts = findContacts();\r\n\r\n  return (\r\n    <section>\r\n      <TitlePhonebook>Phonebook</TitlePhonebook>\r\n      <Container>\r\n        <ContactForm />\r\n        <ContactsContainer>\r\n          <TitleContacts>Contacts</TitleContacts>\r\n          {isLoading && <Loader />}\r\n          {error && <p>Oops, some error occured...{error}</p>}\r\n          {contacts === null ? (\r\n            <NoContacts>No contacts found.</NoContacts>\r\n          ) : (\r\n            <>\r\n              {contacts.length === 0 ? (\r\n                <>\r\n                  <NoContacts>No contacts found.</NoContacts>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Filter value={filter} onChange={changeFilter} />\r\n                  {filteredContacts.length === 0 ? (\r\n                    <NoContacts>No contact found with this name.</NoContacts>\r\n                  ) : (\r\n                    <ContactList\r\n                      contacts={filteredContacts}\r\n                      onDeleteContact={handleDeleteContact}\r\n                    />\r\n                  )}\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </ContactsContainer>\r\n      </Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"names":["Button","styled","colors","ContainerForm","Form","Input","ContactForm","contacts","useSelector","selectUserContacts","dispatch","useDispatch","useState","contactName","setContactName","contactNumber","setContactNumber","onSubmit","event","preventDefault","form","currentTarget","name","elements","value","trim","number","some","contact","Notiflix","addContactsThunk","type","onChange","e","target","required","ContactsList","ContactItem","ListPhone","ButtonDelete","ContactList","onDeleteContact","showContacts","Array","isArray","length","map","onClick","id","FilterStyled","InputFind","Filter","Container","TitleContacts","ContactsContainer","NoContacts","authentificated","selectAuthentificated","isLoading","selectContactsIsLoading","error","selectContactsError","filter","selectContactsFilter","useEffect","requestContactsThunk","filteredContacts","normalizedFilter","toLowerCase","includes","findContacts","Loader","setFilter","contactId","deleteContactsThunk"],"sourceRoot":""}